{"version":3,"file":"static/js/627.429ff20f.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/helpers/constants.js","../node_modules/@react-three/drei/core/Stars.js","../node_modules/@react-three/drei/core/Texture.js","../node_modules/@react-three/drei/web/Html.js","components/Contact.js","../node_modules/react-dom/client.js"],"sourcesContent":["import { REVISION } from 'three';\n\nconst getVersion = () => parseInt(REVISION.replace(/\\D+/g, ''));\nconst version = /* @__PURE__ */getVersion();\n\nexport { version };\n","import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, AdditiveBlending, ShaderMaterial, Vector3, Spherical } from 'three';\nimport { version } from '../helpers/constants.js';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: /* glsl */`\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: /* glsl */`\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n      }`\n    });\n  }\n}\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\nconst Stars = /* @__PURE__ */React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false,\n  speed = 1\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    depthWrite: false,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n","import * as React from 'react';\nimport { useLayoutEffect, useEffect, useMemo } from 'react';\nimport { TextureLoader, Texture as Texture$1 } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input, onLoad) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n  useLayoutEffect(() => {\n    onLoad == null || onLoad(textures);\n  }, [onLoad]);\n\n  // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n  // NOTE: only available for WebGLRenderer\n  useEffect(() => {\n    if ('initTexture' in gl) {\n      let textureArray = [];\n      if (Array.isArray(textures)) {\n        textureArray = textures;\n      } else if (textures instanceof Texture$1) {\n        textureArray = [textures];\n      } else if (IsObject(textures)) {\n        textureArray = Object.values(textures);\n      }\n      textureArray.forEach(texture => {\n        if (texture instanceof Texture$1) {\n          gl.initTexture(texture);\n        }\n      });\n    }\n  }, [gl, textures]);\n  const mappedTextures = useMemo(() => {\n    if (IsObject(input)) {\n      const keyed = {};\n      let i = 0;\n      for (const key in input) keyed[key] = textures[i++];\n      return keyed;\n    } else {\n      return textures;\n    }\n  }, [input, textures]);\n  return mappedTextures;\n}\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\n//\n\nconst Texture = ({\n  children,\n  input,\n  onLoad\n}) => {\n  const ret = useTexture(input, onLoad);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children == null ? void 0 : children(ret));\n};\n\nexport { IsObject, Texture, useTexture };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { Vector3, DoubleSide, OrthographicCamera, PerspectiveCamera, Vector2 } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst v1 = /* @__PURE__ */new Vector3();\nconst v2 = /* @__PURE__ */new Vector3();\nconst v3 = /* @__PURE__ */new Vector3();\nconst v4 = /* @__PURE__ */new Vector2();\nfunction defaultCalculatePosition(el, camera, size) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  objectPos.project(camera);\n  const widthHalf = size.width / 2;\n  const heightHalf = size.height / 2;\n  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];\n}\nfunction isObjectBehindCamera(el, camera) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n  const deltaCamObj = objectPos.sub(cameraPos);\n  const camDir = camera.getWorldDirection(v3);\n  return deltaCamObj.angleTo(camDir) > Math.PI / 2;\n}\nfunction isObjectVisible(el, camera, raycaster, occlude) {\n  const elPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const screenPos = elPos.clone();\n  screenPos.project(camera);\n  v4.set(screenPos.x, screenPos.y);\n  raycaster.setFromCamera(v4, camera);\n  const intersects = raycaster.intersectObjects(occlude, true);\n  if (intersects.length) {\n    const intersectionDistance = intersects[0].distance;\n    const pointDistance = elPos.distanceTo(raycaster.ray.origin);\n    return pointDistance < intersectionDistance;\n  }\n  return true;\n}\nfunction objectScale(el, camera) {\n  if (camera instanceof OrthographicCamera) {\n    return camera.zoom;\n  } else if (camera instanceof PerspectiveCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const vFOV = camera.fov * Math.PI / 180;\n    const dist = objectPos.distanceTo(cameraPos);\n    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;\n    return 1 / scaleFOV;\n  } else {\n    return 1;\n  }\n}\nfunction objectZIndex(el, camera, zIndexRange) {\n  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const dist = objectPos.distanceTo(cameraPos);\n    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);\n    const B = zIndexRange[1] - A * camera.far;\n    return Math.round(A * dist + B);\n  }\n  return undefined;\n}\nconst epsilon = value => Math.abs(value) < 1e-10 ? 0 : value;\nfunction getCSSMatrix(matrix, multipliers, prepend = '') {\n  let matrix3d = 'matrix3d(';\n  for (let i = 0; i !== 16; i++) {\n    matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? ',' : ')');\n  }\n  return prepend + matrix3d;\n}\nconst getCameraCSSMatrix = (multipliers => {\n  return matrix => getCSSMatrix(matrix, multipliers);\n})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);\nconst getObjectCSSMatrix = (scaleMultipliers => {\n  return (matrix, factor) => getCSSMatrix(matrix, scaleMultipliers(factor), 'translate(-50%,-50%)');\n})(f => [1 / f, 1 / f, 1 / f, 1, -1 / f, -1 / f, -1 / f, -1, 1 / f, 1 / f, 1 / f, 1, 1, 1, 1, 1]);\nfunction isRefObject(ref) {\n  return ref && typeof ref === 'object' && 'current' in ref;\n}\nconst Html = /* @__PURE__ */React.forwardRef(({\n  children,\n  eps = 0.001,\n  style,\n  className,\n  prepend,\n  center,\n  fullscreen,\n  portal,\n  distanceFactor,\n  sprite = false,\n  transform = false,\n  occlude,\n  onOcclude,\n  castShadow,\n  receiveShadow,\n  material,\n  geometry,\n  zIndexRange = [16777271, 0],\n  calculatePosition = defaultCalculatePosition,\n  as = 'div',\n  wrapperClass,\n  pointerEvents = 'auto',\n  ...props\n}, ref) => {\n  const {\n    gl,\n    camera,\n    scene,\n    size,\n    raycaster,\n    events,\n    viewport\n  } = useThree();\n  const [el] = React.useState(() => document.createElement(as));\n  const root = React.useRef();\n  const group = React.useRef(null);\n  const oldZoom = React.useRef(0);\n  const oldPosition = React.useRef([0, 0]);\n  const transformOuterRef = React.useRef(null);\n  const transformInnerRef = React.useRef(null);\n  // Append to the connected element, which makes HTML work with views\n  const target = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;\n  const occlusionMeshRef = React.useRef(null);\n  const isMeshSizeSet = React.useRef(false);\n  const isRayCastOcclusion = React.useMemo(() => {\n    return occlude && occlude !== 'blending' || Array.isArray(occlude) && occlude.length && isRefObject(occlude[0]);\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    const el = gl.domElement;\n    if (occlude && occlude === 'blending') {\n      el.style.zIndex = `${Math.floor(zIndexRange[0] / 2)}`;\n      el.style.position = 'absolute';\n      el.style.pointerEvents = 'none';\n    } else {\n      el.style.zIndex = null;\n      el.style.position = null;\n      el.style.pointerEvents = null;\n    }\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    if (group.current) {\n      const currentRoot = root.current = ReactDOM.createRoot(el);\n      scene.updateMatrixWorld();\n      if (transform) {\n        el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;\n      } else {\n        const vec = calculatePosition(group.current, camera, size);\n        el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;\n      }\n      if (target) {\n        if (prepend) target.prepend(el);else target.appendChild(el);\n      }\n      return () => {\n        if (target) target.removeChild(el);\n        currentRoot.unmount();\n      };\n    }\n  }, [target, transform]);\n  React.useLayoutEffect(() => {\n    if (wrapperClass) el.className = wrapperClass;\n  }, [wrapperClass]);\n  const styles = React.useMemo(() => {\n    if (transform) {\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: size.width,\n        height: size.height,\n        transformStyle: 'preserve-3d',\n        pointerEvents: 'none'\n      };\n    } else {\n      return {\n        position: 'absolute',\n        transform: center ? 'translate3d(-50%,-50%,0)' : 'none',\n        ...(fullscreen && {\n          top: -size.height / 2,\n          left: -size.width / 2,\n          width: size.width,\n          height: size.height\n        }),\n        ...style\n      };\n    }\n  }, [style, center, fullscreen, size, transform]);\n  const transformInnerStyles = React.useMemo(() => ({\n    position: 'absolute',\n    pointerEvents\n  }), [pointerEvents]);\n  React.useLayoutEffect(() => {\n    isMeshSizeSet.current = false;\n    if (transform) {\n      var _root$current;\n      (_root$current = root.current) == null || _root$current.render(/*#__PURE__*/React.createElement(\"div\", {\n        ref: transformOuterRef,\n        style: styles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformInnerRef,\n        style: transformInnerStyles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        className: className,\n        style: style,\n        children: children\n      }))));\n    } else {\n      var _root$current2;\n      (_root$current2 = root.current) == null || _root$current2.render(/*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        style: styles,\n        className: className,\n        children: children\n      }));\n    }\n  });\n  const visible = React.useRef(true);\n  useFrame(gl => {\n    if (group.current) {\n      camera.updateMatrixWorld();\n      group.current.updateWorldMatrix(true, false);\n      const vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);\n      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps || Math.abs(oldPosition.current[0] - vec[0]) > eps || Math.abs(oldPosition.current[1] - vec[1]) > eps) {\n        const isBehindCamera = isObjectBehindCamera(group.current, camera);\n        let raytraceTarget = false;\n        if (isRayCastOcclusion) {\n          if (Array.isArray(occlude)) {\n            raytraceTarget = occlude.map(item => item.current);\n          } else if (occlude !== 'blending') {\n            raytraceTarget = [scene];\n          }\n        }\n        const previouslyVisible = visible.current;\n        if (raytraceTarget) {\n          const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);\n          visible.current = isvisible && !isBehindCamera;\n        } else {\n          visible.current = !isBehindCamera;\n        }\n        if (previouslyVisible !== visible.current) {\n          if (onOcclude) onOcclude(!visible.current);else el.style.display = visible.current ? 'block' : 'none';\n        }\n        const halfRange = Math.floor(zIndexRange[0] / 2);\n        const zRange = occlude ? isRayCastOcclusion //\n        ? [zIndexRange[0], halfRange] : [halfRange - 1, 0] : zIndexRange;\n        el.style.zIndex = `${objectZIndex(group.current, camera, zRange)}`;\n        if (transform) {\n          const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];\n          const fov = camera.projectionMatrix.elements[5] * heightHalf;\n          const {\n            isOrthographicCamera,\n            top,\n            left,\n            bottom,\n            right\n          } = camera;\n          const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);\n          const cameraTransform = isOrthographicCamera ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;\n          let matrix = group.current.matrixWorld;\n          if (sprite) {\n            matrix = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(group.current.scale);\n            matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;\n            matrix.elements[15] = 1;\n          }\n          el.style.width = size.width + 'px';\n          el.style.height = size.height + 'px';\n          el.style.perspective = isOrthographicCamera ? '' : `${fov}px`;\n          if (transformOuterRef.current && transformInnerRef.current) {\n            transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;\n            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix, 1 / ((distanceFactor || 10) / 400));\n          }\n        } else {\n          const scale = distanceFactor === undefined ? 1 : objectScale(group.current, camera) * distanceFactor;\n          el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale})`;\n        }\n        oldPosition.current = vec;\n        oldZoom.current = camera.zoom;\n      }\n    }\n    if (!isRayCastOcclusion && occlusionMeshRef.current && !isMeshSizeSet.current) {\n      if (transform) {\n        if (transformOuterRef.current) {\n          const el = transformOuterRef.current.children[0];\n          if (el != null && el.clientWidth && el != null && el.clientHeight) {\n            const {\n              isOrthographicCamera\n            } = camera;\n            if (isOrthographicCamera || geometry) {\n              if (props.scale) {\n                if (!Array.isArray(props.scale)) {\n                  occlusionMeshRef.current.scale.setScalar(1 / props.scale);\n                } else if (props.scale instanceof Vector3) {\n                  occlusionMeshRef.current.scale.copy(props.scale.clone().divideScalar(1));\n                } else {\n                  occlusionMeshRef.current.scale.set(1 / props.scale[0], 1 / props.scale[1], 1 / props.scale[2]);\n                }\n              }\n            } else {\n              const ratio = (distanceFactor || 10) / 400;\n              const w = el.clientWidth * ratio;\n              const h = el.clientHeight * ratio;\n              occlusionMeshRef.current.scale.set(w, h, 1);\n            }\n            isMeshSizeSet.current = true;\n          }\n        }\n      } else {\n        const ele = el.children[0];\n        if (ele != null && ele.clientWidth && ele != null && ele.clientHeight) {\n          const ratio = 1 / viewport.factor;\n          const w = ele.clientWidth * ratio;\n          const h = ele.clientHeight * ratio;\n          occlusionMeshRef.current.scale.set(w, h, 1);\n          isMeshSizeSet.current = true;\n        }\n        occlusionMeshRef.current.lookAt(gl.camera.position);\n      }\n    }\n  });\n  const shaders = React.useMemo(() => ({\n    vertexShader: !transform ? /* glsl */`\n          /*\n            This shader is from the THREE's SpriteMaterial.\n            We need to turn the backing plane into a Sprite\n            (make it always face the camera) if \"transfrom\"\n            is false.\n          */\n          #include <common>\n\n          void main() {\n            vec2 center = vec2(0., 1.);\n            float rotation = 0.0;\n\n            // This is somewhat arbitrary, but it seems to work well\n            // Need to figure out how to derive this dynamically if it even matters\n            float size = 0.03;\n\n            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n            vec2 scale;\n            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n            bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n            if ( isPerspective ) scale *= - mvPosition.z;\n\n            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;\n            vec2 rotatedPosition;\n            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n            mvPosition.xy += rotatedPosition;\n\n            gl_Position = projectionMatrix * mvPosition;\n          }\n      ` : undefined,\n    fragmentShader: /* glsl */`\n        void main() {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n      `\n  }), [transform]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: group\n  }), occlude && !isRayCastOcclusion && /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: castShadow,\n    receiveShadow: receiveShadow,\n    ref: occlusionMeshRef\n  }, geometry || /*#__PURE__*/React.createElement(\"planeGeometry\", null), material || /*#__PURE__*/React.createElement(\"shaderMaterial\", {\n    side: DoubleSide,\n    vertexShader: shaders.vertexShader,\n    fragmentShader: shaders.fragmentShader\n  })));\n});\n\nexport { Html };\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, Stars, Html, useTexture } from \"@react-three/drei\";\n\nconst ContactPage = () => {\n\n  return (\n      <PageContainer>\n        <CanvasContainer>\n          <Canvas>\n            {/* Night Sky */}\n            <ambientLight intensity={0.3} />\n            <pointLight position={[10, 10, 10]} intensity={1} />\n            <Stars radius={100} depth={50} count={5000} factor={4} fade />\n\n            {/* Sun with Contact Details */}\n            <SunWithContact position={[-10, 6, -10]} texture=\"/legacy-app/sun.jpg\" />\n\n            {/* Planets */}\n            <Planet\n              position={[-2, 0, 0]}\n              texture=\"/legacy-app/mars.jpg\"\n              text=\"GitHub\"\n              url=\"https://github.com/SapnadipBaidya\"\n            />\n            <Planet\n              position={[2, 0, 0]}\n              texture=\"/legacy-app/earth.jpg\"\n              text=\"LinkedIn\"\n              url=\"https://www.linkedin.com/in/sapnadipbaidya/\"\n            />\n\n            <OrbitControls enableZoom={true} />\n          </Canvas>\n        </CanvasContainer>\n      </PageContainer>\n  );\n};\n\n// Sun with Contact Details\nconst SunWithContact = ({ position, texture }) => {\n  const textureMap = useTexture(texture);\n  return (\n    <group position={position}>\n      <mesh>\n        <sphereGeometry args={[1.5, 32, 32]} />\n        <meshStandardMaterial\n          color=\"#ffffff\" // Base white color\n          emissive=\"#FFF8DC\" // Warm white glow\n          emissiveIntensity={0.025}\n          map={textureMap}\n        />\n      </mesh>\n      <Html>\n        <p>sapnadip.baidya.official@gmail.com</p>\n        <p>📱 +91 8013687055</p>\n      </Html>\n    </group>\n  );\n};\n\n// Planet Component\nconst Planet = ({ position, texture, text, url }) => {\n  const textureMap = useTexture(texture);\n  const meshRef = React.useRef();\n\n  const handleClick = () => window.open(url, \"_blank\");\n\n  // Floating Animation\n  useFrame(({ clock }) => {\n    const elapsedTime = clock.getElapsedTime();\n    if (meshRef.current) {\n      meshRef.current.position.y = position[1] + Math.sin(elapsedTime) * 0.2;\n      meshRef.current.rotation.y += 0.01;\n    }\n  });\n\n  return (\n    <mesh\n      ref={meshRef}\n      position={position}\n      onClick={handleClick}\n      style={{ cursor: \"pointer\" }}\n    >\n      <sphereGeometry args={[1, 32, 32]} />\n      <meshStandardMaterial\n        map={textureMap}\n        color=\"#ffffff\" // Base white color\n        emissive=\"#FFF8DC\" // Warm white glow\n        emissiveIntensity={0.025}\n      />\n\n      <Html>\n        <p>{text}</p>\n      </Html>\n    </mesh>\n  );\n};\n\n// Styled Components\nconst PageContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  background:  ${({ theme }) => theme.background};\n  transition: background 0.5s ease;\n  color: ${({ theme }) => theme.color};\n`;\n\nconst CanvasContainer = styled.div`\n  flex: 1;\n  position: relative;\n`;\n\n\n\n\nexport default ContactPage;\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["version","getVersion","parseInt","REVISION","replace","StarfieldMaterial","ShaderMaterial","constructor","super","uniforms","time","value","fade","vertexShader","fragmentShader","genStar","r","Vector3","setFromSpherical","Spherical","Math","acos","random","PI","Stars","React","_ref","ref","radius","depth","count","saturation","factor","speed","material","position","color","size","positions","colors","sizes","Array","from","length","Color","increment","i","push","toArray","setHSL","g","b","Float32Array","useFrame","state","current","clock","getElapsedTime","starfieldMaterial","attach","args","object","blending","AdditiveBlending","depthWrite","transparent","vertexColors","IsObject","url","Object","isArray","useTexture","input","onLoad","gl","useThree","textures","useLoader","TextureLoader","values","useLayoutEffect","useEffect","textureArray","Texture$1","forEach","texture","initTexture","useMemo","keyed","key","preload","clear","v1","v2","v3","v4","Vector2","defaultCalculatePosition","el","camera","objectPos","setFromMatrixPosition","matrixWorld","project","widthHalf","width","heightHalf","height","x","y","epsilon","abs","getCSSMatrix","matrix","multipliers","prepend","arguments","undefined","matrix3d","elements","getCameraCSSMatrix","getObjectCSSMatrix","f","Html","children","eps","style","className","center","fullscreen","portal","distanceFactor","sprite","transform","occlude","onOcclude","castShadow","receiveShadow","geometry","zIndexRange","calculatePosition","as","wrapperClass","pointerEvents","props","scene","raycaster","events","viewport","document","createElement","root","group","oldZoom","oldPosition","transformOuterRef","transformInnerRef","target","connected","domElement","parentNode","occlusionMeshRef","isMeshSizeSet","isRayCastOcclusion","isRefObject","zIndex","floor","currentRoot","ReactDOM","updateMatrixWorld","cssText","vec","appendChild","removeChild","unmount","styles","top","left","transformStyle","transformInnerStyles","_root$current","_root$current2","render","visible","updateWorldMatrix","zoom","isBehindCamera","cameraPos","deltaCamObj","sub","camDir","getWorldDirection","angleTo","isObjectBehindCamera","raytraceTarget","map","item","previouslyVisible","isvisible","elPos","screenPos","clone","set","setFromCamera","intersects","intersectObjects","intersectionDistance","distance","distanceTo","ray","origin","isObjectVisible","display","halfRange","zRange","PerspectiveCamera","OrthographicCamera","dist","A","far","near","B","round","objectZIndex","fov","projectionMatrix","isOrthographicCamera","bottom","right","cameraMatrix","matrixWorldInverse","cameraTransform","transpose","copyPosition","scale","perspective","vFOV","tan","objectScale","clientWidth","clientHeight","copy","divideScalar","setScalar","ratio","w","h","ele","lookAt","shaders","_extends","side","DoubleSide","SunWithContact","textureMap","_jsxs","_jsx","emissive","emissiveIntensity","Planet","_ref2","text","meshRef","_ref3","elapsedTime","sin","rotation","onClick","handleClick","window","open","cursor","PageContainer","styled","div","_ref4","theme","background","_ref5","CanvasContainer","ContactPage","Canvas","intensity","OrbitControls","enableZoom","m","require","exports","createRoot","hydrateRoot"],"sourceRoot":""}